# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
 
AWSTemplateFormatVersion:                         '2010-09-09'
Description:                                      >
  This template creates a Fabric client node, which will run the Fabric CLI and
  interact with a Fabric network. The client node is an EC2 instance, and will be created in
  its own VPC. Private VPC Endpoints will also be created, pointing to the Fabric service.
Parameters:
  KeyName:
    Type:                                         AWS::EC2::KeyPair::KeyName
    Description:                                  Name of an existing EC2 key pair to enable SSH access to the EC2 instance
  BlockchainVpcEndpointServiceName:
    Type:                                         String
    Description:                                  Name of the Blockchain VPC Endpoint. Obtained from running 'aws managedblockchain get-network'
 
Resources:
  EC2RootRole:
    Type:                                         "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version:                                  "2012-10-17"
        Statement:
          -
            Effect:                               "Allow"
            Principal:
              Service:
                -                                 "ec2.amazonaws.com"
            Action:
              -                                   "sts:AssumeRole"
      Path:                                       "/"
      MaxSessionDuration:                         10800
      Policies:
        -
          PolicyName:                             "root"
          PolicyDocument:
            Version:                              "2012-10-17"
            Statement:
              -
                Effect:                           "Allow"
                Action:                           "*"
                Resource:                         "*"
 
  EC2RootInstanceProfile:
    Type:                                         "AWS::IAM::InstanceProfile"
    Properties:
      Path:                                       "/"
      Roles:
        -
          Ref:                                    "EC2RootRole"
 
  EC2VPC:
    Type:                                         AWS::EC2::VPC
    Properties:
      CidrBlock:                                  10.0.0.0/16
      EnableDnsSupport:                           True
      EnableDnsHostnames:                         True
      InstanceTenancy:                            default
      Tags:
        - Key:                                    ReInventEC2
          Value:                                  VPC
 
  EC2PublicSubnet:
    Type:                                         AWS::EC2::Subnet
    Properties:
        VpcId:                                    !Ref EC2VPC
        MapPublicIpOnLaunch:                      false
        CidrBlock:                                10.0.0.0/16
        Tags:
        - Key:                                    ReInventEC2
          Value:                                  PublicSubnet
 
  EC2SecurityGroupBase:
        Type:                                     AWS::EC2::SecurityGroup
        Properties:
          GroupDescription:                       Base Security Group
          VpcId:                                  !Ref EC2VPC
          SecurityGroupIngress:
          - IpProtocol:                           tcp
            CidrIp:                               0.0.0.0/0
            FromPort:                             22
            ToPort:                               22
          - IpProtocol:                           tcp
            CidrIp:                               0.0.0.0/0
            FromPort:                             0
            ToPort:                               65535
          Tags:
          - Key:                                  ReInventEC2
            Value:                                BaseSecurityGroup
 
  EC2SecurityGroupBaseIngress:
    Type:                                         AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol:                                 -1
      FromPort:                                   -1
      GroupId:                                    !GetAtt EC2SecurityGroupBase.GroupId
      ToPort:                                     -1
      SourceSecurityGroupId:                      !GetAtt EC2SecurityGroupBase.GroupId
      Tags:
      - Key:                                      ReInventEC2
        Value:                                    BaseSecurityGroupIngress
 
  EC2InternetGateway:
    Type:                                         "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key:                                      ReInventEC2
        Value:                                    InternetGateway
 
  EC2AttachGateway:
    Type:                                         AWS::EC2::VPCGatewayAttachment
    Properties:
       VpcId:                                     !Ref EC2VPC
       InternetGatewayId:                         !Ref EC2InternetGateway
 
  EC2RouteTable:
    Type:                                         AWS::EC2::RouteTable
    Properties:
        VpcId:                                    !Ref EC2VPC
        Tags:
          - Key:                                  ReInventEC2
            Value:                                RouteTable
 
  EC2Route:
    Type:                                         AWS::EC2::Route
    Properties:
        RouteTableId:                             !Ref EC2RouteTable
        DestinationCidrBlock:                     0.0.0.0/0
        GatewayId:                                !Ref EC2InternetGateway
 
  EC2SubnetRouteTableAssociation:
    Type:                                         AWS::EC2::SubnetRouteTableAssociation
    Properties:
        SubnetId:                                 !Ref EC2PublicSubnet
        RouteTableId:                             !Ref EC2RouteTable
 
  EC2VPCEndpoint:
    Type:                                         AWS::EC2::VPCEndpoint
    Properties:
        VpcId:                                    !Ref EC2VPC
        PrivateDnsEnabled:                        True
        ServiceName:                              !Ref BlockchainVpcEndpointServiceName
        VpcEndpointType:                          Interface
        SubnetIds:                                [!Ref EC2PublicSubnet]
        SecurityGroupIds:                         [!Ref EC2SecurityGroupBase]
 
  EC2EC2:
    Type:                                         AWS::EC2::Instance
    Properties:
        KeyName:                                  !Ref KeyName
        ImageId:                                  'ami-0434d5878c6ad6d4c'
        InstanceType:                             't2.small'
        IamInstanceProfile:                       !Ref EC2RootInstanceProfile
        NetworkInterfaces:
        - AssociatePublicIpAddress:               true
          DeviceIndex:                            0
          GroupSet:                               [!Ref EC2SecurityGroupBase]
          SubnetId:                               !Ref EC2PublicSubnet
        Tags:
          - Key:                                  Name
            Value:                                ManagedEC2EC2ClientInstance
 
  EC2ELB:
    Type:                                         AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:                             [!Ref EC2SecurityGroupBase]
      Subnets:                                    [!Ref EC2PublicSubnet]
      Instances:
        - !Ref                                    EC2EC2
      Listeners:
        - LoadBalancerPort:                       '80'
          InstancePort:                           '3000'
          Protocol:                               TCP
      HealthCheck:
        Target:                                   HTTP:3000/health
        HealthyThreshold:                         '3'
        UnhealthyThreshold:                       '5'
        Interval:                                 '10'
        Timeout:                                  '5'
      Tags:
        - Key:                                    Name
          Value:                                  ELB
 
Outputs:
  VPCID:
    Description:                                  VPC ID
    Value:
      !Ref                                        EC2VPC
  PublicSubnetID:
    Description:                                  Public Subnet ID
    Value:
      !Ref                                        EC2PublicSubnet
  SecurityGroupID:
    Description:                                  Security Group ID
    Value:
      !GetAtt                                     EC2SecurityGroupBase.GroupId
  EC2URL:
    Description:                                  Public DNS of the EC2 instance
    Value:
      !GetAtt                                     EC2EC2.PublicDnsName
  ELBDNS:
    Description:                                  Public DNS of the ELB
    Value:
      !GetAtt                                     EC2ELB.DNSName
  BlockchainVPCEndpoint:
    Description:                                  VPC Endpoint ID
    Value:
      !Ref                                        EC2VPCEndpoint