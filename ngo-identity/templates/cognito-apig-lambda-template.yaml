# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
 
AWSTemplateFormatVersion:                         '2010-09-09'
Transform:                                        'AWS::Serverless-2016-10-31'
Description:                                      >
  This template deploys an API Gateway, Cognito User Pool, and a Lambda function.  The API Gateway authorizes users via the Cognito user pool, and issues transactions to Managed Blockchain via a Lambda function.
Parameters:
  SECURITYGROUPID:
    Type:                                         String
  SUBNETID:
    Type:                                         String
  VPCID:
    Type:                                         String
  LAMBDANAME:
    Type:                                         String
  MEMBERNAME:
    Type:                                         String
  NETWORKID:
    Type:                                         String
  MEMBERID:
    Type:                                         String
  CHANNELNAME:
    Type:                                         String
  CHAINCODEID:
    Type:                                         String
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "NGOUserPool"
      Schema:
        - Name: "fabricUsername"
          AttributeDataType: String
          Mutable: true
  CognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: CognitoNGOAppClient
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: False
      UserPoolId: !Ref CognitoUserPool
  SecretsManagerReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - "secretsmanager:GetResourcePolicy"
          - "secretsmanager:GetSecretValue"
          - "secretsmanager:DescribeSecret"
          - "secretsmanager:ListSecretVersionIds"
          "Resource": !Sub 'arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:/amb/${NETWORKID}/${MEMBERID}/users/*'
  SystemsManagerReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - "ssm:GetParameter"
          "Resource": !Sub 'arn:aws:ssm:us-east-1:${AWS::AccountId}:parameter/amb/${NETWORKID}/${MEMBERID}/*'
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref SecretsManagerReadPolicy
        - !Ref SystemsManagerReadPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  APIGLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: ../fabricLambda/src
      FunctionName: !Ref LAMBDANAME
      MemorySize: 512
      Role: !GetAtt LambdaRole.Arn
      Timeout: 15
      VpcConfig:
        SecurityGroupIds: 
          - !Ref SECURITYGROUPID
        SubnetIds:
          - !Ref SUBNETID
      Environment:
        Variables:
          CHANNEL_NAME: !Ref CHANNELNAME
          CHAIN_CODE_ID: !Ref CHAINCODEID
          MEMBER_ID: !Ref MEMBERID
          NETWORK_ID: !Ref NETWORKID
      Events:
        GetDonors:
          Type: Api
          Properties:
            Path: /donors
            Method: get
            RestApiId: !Ref DonorsAPIGateway
        GetDonorsAdmin:
          Type: Api
          Properties:
            Path: /donorsmanager
            Method: get
            RestApiId: !Ref DonorsAPIGateway
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId: !Ref DonorsAPIGateway
  DonorsAPIGateway:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: DonorsAPI
      StageName: dev
      EndpointConfiguration: Regional
      Cors:
        AllowCredentials: true
        AllowHeaders: "'*''"
        AllowMethods: "'POST, GET, OPTIONS, PUT'"
        AllowOrigin: "'*''"
      Auth:
        DefaultAuthorizer: NGOCognitoAuthorizer
        Authorizers:
          NGOCognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2020-08-01T12:00:00Z"
          title: "Donors API"
        paths:
          /donors:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "401":
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIGLambdaFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
                    : \"queryAllDonors\",\n  \"chaincodeFunctionArgs\": {},\n  \"fabricUsername\"\
                    \ : \"$context.authorizer.claims['custom:fabricUsername']\"\n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /donorsmanager:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "401":
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIGLambdaFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
                    : \"queryAllDonorsManagerOnly\",\n  \"chaincodeFunctionArgs\": {},\n  \"fabricUsername\"\
                    \ : \"$context.authorizer.claims['custom:fabricUsername']\"\n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /user:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "401":
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIGLambdaFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
                    : \"getClientIdentityInfo\",\n  \"chaincodeFunctionArgs\": {},\n  \"fabricUsername\"\
                    \ : \"$context.authorizer.claims['custom:fabricUsername']\"\n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
Outputs:
  DonorsAPIGatewayURL:
    Description: "API Gateway endpoint URL for Dev stage"
    Value: !Sub "https://${DonorsAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"
  CognitoUserPoolID:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool
  CognitoAppClientID:
    Description: "Cognito App Client ID"
    Value: !Ref CognitoAppClient